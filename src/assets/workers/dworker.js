(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

var WorkerMessageTypes = Object.freeze({
    CONNECT_WORKER: 'CONNECT_WORKER',
    CONNECT_WORKER_SUCCESS: 'CONNECT_WORKER_SUCCESS',
    CONNECT_WORKER_FAILED: 'CONNECT_WORKER_FAILED',
    SET_WORKER_CONFIG: 'SET_WORKER_CONFIG',
    WORKER_READY: 'WORKER_READY',
    CONNECT_SOCKET: 'CONNECT_SOCKET',
    CONNECT_SOCKET_SUCCESS: 'CONNECT_SOCKET_SUCCESS',
    CONNECT_SOCKET_FAILED: 'CONNECT_SOCKET_FAILED',
    SUBSCRIBE_DATA: 'SUBSCRIBE_DATA',
    SUBSCRIBE_DATA_FAILED: 'SUBSCRIBE_DATA_FAILED'
});

var WorkerMessage = (function () {
    function WorkerMessage(payload) {
        this.payload = payload;
    }
    return WorkerMessage;
}());
var WorkerMessageBuilder = (function () {
    function WorkerMessageBuilder() {
    }
    WorkerMessageBuilder.createMessage = function (type, payload) {
        var message = new WorkerMessage(payload);
        message.type = type;
        return message;
    };
    return WorkerMessageBuilder;
}());

var WorkerAgent = (function () {
    function WorkerAgent() {
        if (WorkerAgent._instance) {
            throw new Error("Error: Instantiation failed: Use WorkerAgent.instance instead of new.");
        }
        WorkerAgent._instance = this;
    }
    Object.defineProperty(WorkerAgent, "instance", {
        get: function () {
            return WorkerAgent._instance;
        },
        enumerable: true,
        configurable: true
    });
    WorkerAgent.prototype.setContext = function (context) {
        this.context = context;
    };
    WorkerAgent.prototype.onMessage = function (message) {
        switch (message.type) {
            case WorkerMessageTypes.CONNECT_WORKER:
                this.context['name'] = message.payload.name;
                this.dispatchMessage(WorkerMessageBuilder.createMessage(WorkerMessageTypes.CONNECT_WORKER_SUCCESS));
                break;
            default:
        }
    };
    WorkerAgent.prototype.dispatchMessage = function (message) {
        this.context.postMessage(message);
    };
    WorkerAgent._instance = new WorkerAgent();
    return WorkerAgent;
}());

WorkerAgent.instance.setContext(self);
self.addEventListener('message', function (evt) {
    WorkerAgent.instance.onMessage(evt.data);
});
self.addEventListener('messageerror', function (evt) {
    debugger;
    console.error(evt);
});

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHdvcmtlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vYXBwL2NvbmZpZy1tb2RlbHMvd29ya2VyLW1lc3NhZ2UtdHlwZXMudHMiLCIuLi8uLi9hcHAvY29uZmlnLW1vZGVscy93b3JrZXItbWVzc2FnZS50cyIsIi4uLy4uL2FwcC93b3JrZXItc2VydmljZXMvd29ya2VyLWFnZW50LnRzIiwiLi4vLi4vYXBwL3dvcmtlci1zZXJ2aWNlcy9kZWRpY2F0ZWQtd29ya2VyLWdhdGV3YXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFdvcmtlck1lc3NhZ2VUeXBlcyA9IE9iamVjdC5mcmVlemUoe1xuICAgIENPTk5FQ1RfV09SS0VSIDogJ0NPTk5FQ1RfV09SS0VSJyxcbiAgICBDT05ORUNUX1dPUktFUl9TVUNDRVNTIDogJ0NPTk5FQ1RfV09SS0VSX1NVQ0NFU1MnLFxuICAgIENPTk5FQ1RfV09SS0VSX0ZBSUxFRCA6ICdDT05ORUNUX1dPUktFUl9GQUlMRUQnLFxuXG4gICAgU0VUX1dPUktFUl9DT05GSUcgOiAnU0VUX1dPUktFUl9DT05GSUcnLFxuICAgIFdPUktFUl9SRUFEWSA6ICdXT1JLRVJfUkVBRFknLFxuXG4gICAgQ09OTkVDVF9TT0NLRVQgOiAnQ09OTkVDVF9TT0NLRVQnLFxuICAgIENPTk5FQ1RfU09DS0VUX1NVQ0NFU1MgOiAnQ09OTkVDVF9TT0NLRVRfU1VDQ0VTUycsXG4gICAgQ09OTkVDVF9TT0NLRVRfRkFJTEVEIDogJ0NPTk5FQ1RfU09DS0VUX0ZBSUxFRCcsXG5cbiAgICBTVUJTQ1JJQkVfREFUQSA6ICdTVUJTQ1JJQkVfREFUQScsXG4gICAgU1VCU0NSSUJFX0RBVEFfRkFJTEVEIDogJ1NVQlNDUklCRV9EQVRBX0ZBSUxFRCdcbn0pO1xuXG5cbiIsIlxuZXhwb3J0IGNsYXNzIFdvcmtlck1lc3NhZ2Uge1xuICAgIHR5cGUgOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ/OiBhbnkpIHtcblxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFdvcmtlck1lc3NhZ2VCdWlsZGVyIHtcbiAgICBzdGF0aWMgY3JlYXRlTWVzc2FnZSh0eXBlOiBzdHJpbmcscGF5bG9hZD86IGFueSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gbmV3IFdvcmtlck1lc3NhZ2UocGF5bG9hZCk7XG4gICAgICAgIG1lc3NhZ2UudHlwZSA9IHR5cGU7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBXb3JrZXJNZXNzYWdlLCBXb3JrZXJNZXNzYWdlVHlwZXMsIFdvcmtlck1lc3NhZ2VCdWlsZGVyIH0gZnJvbSBcIi4uL2NvbmZpZy1tb2RlbHMvaW5kZXhcIjtcblxuXG5cbmV4cG9ydCBjbGFzcyBXb3JrZXJBZ2VudCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBXb3JrZXJBZ2VudCA9IG5ldyBXb3JrZXJBZ2VudCgpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGlmIChXb3JrZXJBZ2VudC5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yOiBJbnN0YW50aWF0aW9uIGZhaWxlZDogVXNlIFdvcmtlckFnZW50Lmluc3RhbmNlIGluc3RlYWQgb2YgbmV3LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBXb3JrZXJBZ2VudC5faW5zdGFuY2UgPSB0aGlzO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogV29ya2VyQWdlbnQge1xuICAgICAgICByZXR1cm4gV29ya2VyQWdlbnQuX2luc3RhbmNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29udGV4dCA6IGFueTtcblxuICAgIHNldENvbnRleHQoY29udGV4dDogYW55KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgfVxuXG4gICAgb25NZXNzYWdlKG1lc3NhZ2U6IFdvcmtlck1lc3NhZ2UpIHtcbiAgICAgICAgc3dpdGNoKG1lc3NhZ2UudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBXb3JrZXJNZXNzYWdlVHlwZXMuQ09OTkVDVF9XT1JLRVI6XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0WyduYW1lJ10gPSBtZXNzYWdlLnBheWxvYWQubmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoTWVzc2FnZShXb3JrZXJNZXNzYWdlQnVpbGRlci5jcmVhdGVNZXNzYWdlKFdvcmtlck1lc3NhZ2VUeXBlcy5DT05ORUNUX1dPUktFUl9TVUNDRVNTKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gVE9ETzogU2VuZCB0byBTb2NrZXRTZXJ2aWNlXG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzcGF0Y2hNZXNzYWdlKG1lc3NhZ2U6IFdvcmtlck1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBXb3JrZXJBZ2VudCB9IGZyb20gJy4vd29ya2VyLWFnZW50JztcblxuV29ya2VyQWdlbnQuaW5zdGFuY2Uuc2V0Q29udGV4dChzZWxmKTtcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldnQ6IE1lc3NhZ2VFdmVudCkgPT4ge1xuICAgIFdvcmtlckFnZW50Lmluc3RhbmNlLm9uTWVzc2FnZShldnQuZGF0YSk7XG59KTtcblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlZXJyb3InLCAoZXZ0OiBFcnJvckV2ZW50KSA9PiB7XG4gICAgZGVidWdnZXI7XG4gICAgY29uc29sZS5lcnJvcihldnQpO1xufSk7Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLElBQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM1QyxjQUFjLEVBQUcsZ0JBQWdCO0lBQ2pDLHNCQUFzQixFQUFHLHdCQUF3QjtJQUNqRCxxQkFBcUIsRUFBRyx1QkFBdUI7SUFFL0MsaUJBQWlCLEVBQUcsbUJBQW1CO0lBQ3ZDLFlBQVksRUFBRyxjQUFjO0lBRTdCLGNBQWMsRUFBRyxnQkFBZ0I7SUFDakMsc0JBQXNCLEVBQUcsd0JBQXdCO0lBQ2pELHFCQUFxQixFQUFHLHVCQUF1QjtJQUUvQyxjQUFjLEVBQUcsZ0JBQWdCO0lBQ2pDLHFCQUFxQixFQUFHLHVCQUF1QjtDQUNsRCxDQUFDOztBQ2JLO0lBRUgsdUJBQW1CLE9BQWE7UUFBYixZQUFPLEdBQVAsT0FBTyxDQUFNO0tBRS9CO0lBQ0wsb0JBQUM7Q0FBQSxJQUFBO0FBRU07SUFBQTtLQU1OO0lBTFUsa0NBQWEsR0FBcEIsVUFBcUIsSUFBWSxFQUFDLE9BQWE7UUFDM0MsSUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0MsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDcEIsT0FBTyxPQUFPLENBQUM7S0FDbEI7SUFDTCwyQkFBQztDQUFBOztBQ1ZNO0lBR0g7UUFDSSxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDO1NBQzVGO1FBQ0QsV0FBVyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7S0FDaEM7SUFFRCxzQkFBVyx1QkFBUTthQUFuQjtZQUNJLE9BQU8sV0FBVyxDQUFDLFNBQVMsQ0FBQztTQUNoQzs7O09BQUE7SUFJRCxnQ0FBVSxHQUFWLFVBQVcsT0FBWTtRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztLQUMxQjtJQUVELCtCQUFTLEdBQVQsVUFBVSxPQUFzQjtRQUM1QixRQUFPLE9BQU8sQ0FBQyxJQUFJO1lBQ2YsS0FBSyxrQkFBa0IsQ0FBQyxjQUFjO2dCQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUM1QyxJQUFJLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BHLE1BQU07WUFDVixRQUFRO1NBRVg7S0FDSjtJQUNELHFDQUFlLEdBQWYsVUFBZ0IsT0FBc0I7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDckM7SUEvQmMscUJBQVMsR0FBZ0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztJQWdDOUQsa0JBQUM7Q0FBQTs7QUNuQ0QsV0FBVyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFDLEdBQWlCO0lBQy9DLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM1QyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLFVBQUMsR0FBZTtJQUNsRCxTQUFTO0lBQ1QsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN0QixDQUFDLENBQUM7Ozs7In0=
